@startuml

<style>
activityDiagram {
    BackgroundColor #F0E8F5
    BorderColor #FFC0CB
    FontColor #333
    FontName Comic Sans MS
}

diamond {
    BackgroundColor #FFDEE3
    LineColor #FF69B4
    FontColor #FF1493
    FontName Comic Sans MS
    FontSize 16
}

arrow {
    FontColor #FFD700
    FontName Comic Sans MS
    FontSize 16
}

partition {
    LineColor #FF4500
    FontColor #FF6347
    RoundCorner 20
    BackgroundColor #FFE4E1
}

note {
    FontColor #0000FF
    LineColor #8A2BE2
    BackgroundColor #E6E6FA
}

document {
    BackgroundColor #F5F5DC
}

group {
    FontColor #FF69B4
    LineColor #DDA0DD
    BackgroundColor #FFB6C1
}
</style>
title pop实现

skinparam ConditionEndStyle diamond

start
group pop
    :var nextCh chan<- interface{};
    :var notification interface{};
    while (true)
      switch (select)
      case(nextCh <- notification)
          note
          下面将获取到的通知添加到nextCh中，供run()方法中消费
          end note
          :var ok bool;
          :从pendingNotifications中消费通知，生产者在下面的case中
		  notification, ok = p.pendingNotifications.ReadOne();
		  if (没有内容可以pop \n\t    !ok) is (是) then
		    :既然没有事情要做, 那么就设 nextCh 为 nil.
             当 nextCh 为 nil 时, select 忽略该 case.
		     \t\t\t   nextCh = nil;
		  else (否)
		  endif
      case(notificationToAdd, ok := <-p.addCh)
          note right
          逻辑从这里开始，从addCh中提取通知
          end note
          if (notification == nil) is (是) then
            :\t 当 notification 为空时
            notification = notificationToAdd;
            :给 nextCh 一个能用的 channel.
            \t nextCh = p.nextCh;
          else (否)
            :将新添加的通知丢到pendingNotifications(ringbuffer 缓冲里)中
            \t p.pendingNotifications.WriteOne(notificationToAdd);
          endif
      endswitch
    endwhile
end group
stop
@enduml